{"version":3,"sources":["../index.js"],"names":["console","log","process","env","MONGO_URL","mongoURL","app","middleware","req","res","next","initMongo","MongoClient","connect","useNewUrlParser","useUnifiedTopology","client","db","s","options","dbName","collection","init","storeUsers","set","use","express","path","join","__dirname","json","urlencoded","extended","get","render","title","nearlyExpiredNames","currDate","getUsers","users","forEach","user","lastUpdateDate","nameUpdated","add","diff","moment","duration","asDays","push","name","siteTitle","names","post","getUserByUsername","body","username","redirect","params","message","newName","previousNameSet","Set","previousNames","has","updateUserData","format","newUser","listen","insertMany","usersData","find","toArray","findOne","prevNames","updateDate","updateOne","$set"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport usersData from \"./data.json\";\nimport moment from \"moment\";\nimport MongoClient from \"mongodb\";\nimport path from \"path\";\n\nconsole.log(process.env.MONGO_URL);\nconst mongoURL = process.env.MONGO_URL || 'mongodb://localhost:27017/hrtest';\n\nconst app = express();\n\n// Create a middleware\nconst middleware = ((req, res, next) => {\n    // here we can check token on the headers for authentication\n    // and block access to the routes that need authorisation.\n    // Not implemented for now :)\n    console.log(\"middle\");\n    next();\n});\n\n// init MongoDB\nconst initMongo = (async () => {\n    console.log('Starting MongoDB...');\n    let client;\n    try {\n        client = await MongoClient.connect(mongoURL, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n        });\n    } catch(err) {\n        console.log(err);\n    }\n    console.log('MongoDB started...');\n    return client.db(client.s.options.dbName).collection('users');\n});\n\nconst init = (async () => {\n    const db = await initMongo();\n\n    await storeUsers(db);\n\n    app.set(\"port\", 5000);\n    app.set('views', './views');\n    app.set('view engine', 'pug');\n    app.use(express.static(path.join(__dirname, 'public')))\n    \n    app.use(express.json());\n    app.use(express.urlencoded({\n        extended: true\n        \n    }));\n\n    app.get(\"/\", (req, res) => {\n        res.render('index', { title: 'Test' });\n    });\n    \n    app.get(\"/list\", async (req, res) => {\n        const nearlyExpiredNames = [];\n        const currDate = moment();\n\n        const users = await getUsers(db);\n        users.forEach((user) => {\n            // We add a year on the last updated date and we compare\n            // it with the current date for showing the nearly expired\n            // names\n            let lastUpdateDate = moment(user.nameUpdated).add(1, 'y');\n            const diff = moment.duration(lastUpdateDate.diff(currDate))\n            if (diff.asDays() <= 28) nearlyExpiredNames.push(user.name)\n        })\n        res.render(\"list\", { \n            siteTitle: \"Test\",\n            title: \"Names close to expiry!\",\n            names: nearlyExpiredNames \n        });\n    });\n    \n    app.post(\"/\", async (req, res) => {\n        // check to see if user exists\n        const user = await getUserByUsername(db, req.body.username); \n        if (user) {\n            res.redirect(`/users/${user.username}`);\n        } else {\n            res.redirect(\"/\");\n        }\n    });\n    \n    app.get(\"/users/:username\", middleware, async (req, res) => {\n        //find name from username\n        const user = await getUserByUsername(db, req.params.username);\n        if (user) {\n            res.render(\"user\", { \n                siteTitle: \"Test\",\n                user, message: \"\" \n            });\n        } else {\n            res.redirect(\"/\");\n        }\n    });\n    \n    \n    app.post(\"/users/:username\", middleware, async (req, res) => {\n        const user = await getUserByUsername(db, req.params.username);\n        const newName = req.body.newName;\n        const previousNameSet = new Set(user.previousNames);\n\n        if (previousNameSet.has(newName)) {\n            res.render(\"user\", { \n                siteTitle: \"Test\",\n                user, \n                message: \"The inserted name was previously used!\" \n            });\n        } else {\n            //update the name and add new name to previous names array\n            await updateUserData(db, user.username, [...user.previousNames, user.name], newName, moment().format());\n            const newUser = await getUserByUsername(db, user.username);\n            res.render(\"user\", { \n                siteTitle: \"Test\",\n                user: newUser, \n                message: \"Name has been updated correctly!\" \n            });\n        }\n    });\n    \n    app.get(\"/users/:username/list\", middleware, async (req, res) => {\n        const user = await getUserByUsername(db, req.params.username);\n        res.render(\"list\", { \n            siteTitle: \"Test\",\n            title: \"Previously used names!\",\n            names: user.previousNames \n        });\n    });\n    \n    app.listen(app.get(\"port\"), () => {\n        console.log(`App started listening on PORT: ${app.get(\"port\")}`)\n    });\n});\n\nasync function storeUsers(db) {\n    await db.insertMany(usersData);\n}\n\nasync function getUsers(db) {\n    return await db.find({}).toArray();\n}\n\nasync function getUserByUsername(db, username) {\n    return await db.findOne({ username: username });\n}\n\nasync function updateUserData(db, username ,prevNames, newName, updateDate) {\n    await db.updateOne(\n        { username: username },\n        {\n            $set: {\n                name: newName,\n                previousNames: prevNames,\n                nameUpdated:  updateDate\n            }\n        }\n    );\n}\n\ninit();"],"file":"index.js"}